name: CI AWS RDS Postgres

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:

jobs:
  validate_and_apply:
    if: startsWith(github.head_ref || '', 'feature/')
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    steps:
      - uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create app database
        env:
          PGPASSWORD: password
        run: |
          set -e
          psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT version();"
          psql -h localhost -p 5432 -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='appdb'" | grep -q 1 \
            || createdb -h localhost -p 5432 -U postgres appdb

      - name: Ensure app_readonly role exists (defense-in-depth)
        env:
          PGPASSWORD: password
        run: |
          set -e
          psql -h localhost -p 5432 -U postgres -d appdb -tc "SELECT 1 FROM pg_roles WHERE rolname='app_readonly'" | grep -q 1 \
            || psql -h localhost -p 5432 -U postgres -d appdb -c "CREATE ROLE app_readonly NOLOGIN;"

      - name: Setup Liquibase
        uses: liquibase/setup-liquibase@v1
        with:
          version: '4.32.0'
          edition: 'oss'

      # Optional: only needed right after you edit an already-applied changeset
      - name: Liquibase clear checksums (optional)
        run: |
          liquibase \
            --url="jdbc:postgresql://localhost:5432/appdb" \
            --username="postgres" \
            --password="password" \
            --changeLogFile="db/changelog/master.yaml" \
            --log-level=info \
            clearCheckSums || true

      - name: Liquibase validate
        run: |
          liquibase \
            --url="jdbc:postgresql://localhost:5432/appdb" \
            --username="postgres" \
            --password="password" \
            --changeLogFile="db/changelog/master.yaml" \
            --log-level=info \
            validate

      - name: Liquibase update (apply all changes)
        run: |
          liquibase \
            --url="jdbc:postgresql://localhost:5432/appdb" \
            --username="postgres" \
            --password="password" \
            --changeLogFile="db/changelog/master.yaml" \
            --log-level=info \
            update

      - name: Post-deploy SQL (optional if present)
        env:
          PGPASSWORD: password
        run: |
          if [ -f db/post_deploy/insert_minimal_data.sql ]; then
            psql -h localhost -p 5432 -U postgres -d appdb -v ON_ERROR_STOP=1 -f db/post_deploy/insert_minimal_data.sql
          fi

      - name: Smoke checks
        env:
          PGPASSWORD: password
        run: |
          set -e
          psql -h localhost -p 5432 -U postgres -d appdb -c "SELECT COUNT(*) AS customers FROM customers;" || true
          psql -h localhost -p 5432 -U postgres -d appdb -c "SELECT COUNT(*) AS orders FROM orders;" || true
          psql -h localhost -p 5432 -U postgres -d appdb -c "SELECT COUNT(*) AS products FROM products;" || true
          psql -h localhost -p 5432 -U postgres -d appdb -c "SELECT * FROM vw_product_sales LIMIT 5;" || true
